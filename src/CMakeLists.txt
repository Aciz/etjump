project(etjump)
cmake_minimum_required(VERSION 2.8.1)
cmake_policy(SET CMP0015 NEW)

# Release
SET(CMAKE_BUILD_TYPE Release)

# Store compiled binaries to folder
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build)

# Set the used compiler
# SET(CMAKE_C_COMPILER gcc-3.4)
# SET(CMAKE_CXX_COMPILER g++-3.4)

IF(${CMAKE_BUILD_TYPE} MATCHES "Release")
	add_definitions(-DNDEBUG)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pipe")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-format")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fmessage-length=0")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -lstdc++")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -lpthread")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=i686")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Winline")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ffast-math")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fomit-frame-pointer")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -finline-functions")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fschedule-insns2")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fno-strict-aliasing")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ")
ENDIF($(CMAKE_BUILD_TYPE) MATCHES "Release")

SET(CMAKE_INCLUDE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cgame)
SET(CMAKE_INCLUDE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/game)
SET(CMAKE_INCLUDE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/ui)

FILE(GLOB CGAME_SRC
	""
)
